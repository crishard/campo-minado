import pytest
from functions.calculate_numbers import calculate_numbers_function


@pytest.mark.parametrize("input_field, rows, cols, expected_field", [


    # teste matriz 6x6 - 8 bombas
    ([
        [-1, 0,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0,  0,],
        [0,  0,  0, -1, -1,  0,],
        [0, -1,  0,  0,  0,  0,],
        [0,  0,  0, -1,  0,  0,],
        [-1, 0,  0, -1,  0, -1],
    ], 6, 6, [
        [-1, 1,  0,  0,  0,  0,],
        [1,  1,  1,  2,  2,  1,],
        [1,  1,  2, -1, -1,  1,],
        [1, -1,  3,  3,  3,  1,],
        [2,  2,  3, -1,  3,  1,],
        [-1, 1,  2, -1,  3, -1],
    ]),

    # teste matriz 7x7 - 9
    ([
        [-1, 0,  0,  0,  0,  0, -1],
        [0,  0,  0,  0,  0,  0, 0],
        [0,  0,  0, -1, -1,  0, 0],
        [0, -1,  0,  0,  0,  0, 0],
        [0,  0,  0, -1,  0,  0, 0],
        [-1, 0,  0, -1,  0, -1, 0],
        [0, 0,  0, 0,  0, 0, 0],
    ], 7, 7, [
        [-1,  1,  0,  0,  0,  1, -1],
        [1,  1,  1,  2,  2,  2, 1],
        [1,  1,  2, -1, -1,  1, 0],
        [1, -1,  3,  3,  3,  1, 0],
        [2,  2,  3, -1,  3,  1, 1],
        [-1, 1,  2, -1,  3, -1, 1],
        [1,  1,  1,  1,  2, 1, 1],
    ]),

    # para o tabuleiro de nível fácil - 10 testes no total

    # teste 1
    ([
        [0,  0,  0,  0,  0,  0,  0,  0],
        [0,  0,  0,  0,  0,  0,  0,  0,],
        [0,  0,  0, -1, -1,  0,  0,  0],
        [0,  0,  0,  0,  0,  0, -1,  0],
        [0,  0,  0, -1,  0,  0,  0, - 1],
        [-1,  0,  0, -1,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0, -1, -1,  0],
        [0,  0,  0,  0,  0,  0, -1,  0],
    ], 8, 8, [
        [0,  0,  0,  0,  0,  0,  0,  0],
        [0,  0,  1,  2,  2,  1,  0,  0],
        [0,  0,  1, -1, -1,  2,  1,  1],
        [0,  0,  2,  3,  3,  2, -1,  2],
        [1,  1,  2, -1,  2,  1,  2, -1],
        [-1,  1,  2, -1,  3, 2,  3, 2],
        [1,  1,  1,  1,  2, -1, -1, 2],
        [0,  0,  0,  0,  1,  3, -1, 2]
    ]),

    # teste 2
    ([
        [0,  0, -1,  0,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0, -1,  0,  0,],
        [0,  0,  0,  0,  0,  0, -1,  0,],
        [0,  0, -1,  0,  0,  0,  0,  0,],
        [-1,  0,  0,  0,  0, -1,  0,  0,],
        [0, -1,  0,  0, -1,  0,  0, -1,],
        [0,  0,  0,  0,  0,  0, -1,  0,],
        [0,  0,  0,  0,  0,  0,  0,  0,],
    ], 8, 8, [
        [0,  1, -1, 1,  1,  1,  1,  0,],
        [0,  1,  1, 1,  1, -1,  2,  1,],
        [0,  1,  1, 1,  1,  2, -1,  1,],
        [1,  2, -1, 1,  1,  2,  2,  1,],
        [-1, 3,  2,  2, 2, -1,  2,  1,],
        [2, -1,  1, 1, -1,  3,  3, -1,],
        [1,  1,  1, 1,  1,  2, -1,  2,],
        [0,  0,  0, 0,  0,  1,  1,  1,],
    ]),

    # teste 3
    ([
        [-1,  0, 0,  0,  0,  0,  0,  0,],
        [-1, 0,  0,  0,  0,  0,  0,  0,],
        [0,  0, 0,  0,  0,  0,  0, - 1,],
        [0,  0,  0,  0,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0,  0,  0,  0,],
        [-1, 0, -1, -1,  0,  0,  0, -1,],
        [0,  0,  0, -1,  0,  0,  0,  0,],
        [-1,  0, 0, 0,  0, - 1,  0,  0,],
    ], 8, 8, [
        [-1, 2,  0,  0,  0,  0,  0,  0,],
        [-1, 2,  0,  0,  0,  0,  1,  1,],
        [1,  1,  0,  0,  0,  0,  1, -1,],
        [0,  0,  0,  0,  0,  0,  1,  1,],
        [1,  2,  2,  2,  1,  0,  1,  1,],
        [-1, 2, -1, -1,  2,  0,  1, -1,],
        [2,  3,  3, -1,  3,  1,  2,  1,],
        [-1, 1,  1,  1,  2, -1,  1,  0,],
    ]),

    # Teste 4
    ([
        [0,  0,  0,  0,  0,  0,  0,  0],
        [0,  0,  0,  0,  0,  0,  0,  0],
        [0,  0,  0, -1, -1,  0,  0,  0],
        [0,  0,  0,  0,  0,  0, -1,  0],
        [0,  0,  0, -1,  0,  0,  0, - 1],
        [-1,  0,  0, -1,  0,  0,  0,  0],
        [0,  0,  0,  0,  0, -1, -1,  0],
        [0,  0,  0,  0,  0,  0, -1,  0],
    ], 8, 8, [
        [0,  0,  0,  0,  0,  0,  0,  0],
        [0,  0,  1,  2,  2,  1,  0,  0],
        [0,  0,  1, -1, -1,  2,  1,  1],
        [0,  0,  2,  3,  3,  2, -1,  2],
        [1,  1,  2, -1,  2,  1,  2, -1],
        [-1,  1,  2, -1,  3, 2,  3, 2],
        [1,  1,  1,  1,  2, -1, -1, 2],
        [0,  0,  0,  0,  1,  3, -1, 2]
    ]),

    # Teste 5
    ([
        [0,  0, -1,  0,  0,  0,  0,  0],
        [0,  0,  0,  0,  0, -1,  0,  0],
        [0,  0,  0,  0,  0,  0, -1,  0],
        [0,  0, -1,  0,  0,  0,  0,  0],
        [-1,  0,  0,  0,  0, -1,  0,  0],
        [0, -1,  0,  0, -1,  0,  0, -1],
        [0,  0,  0,  0,  0,  0, -1,  0],
        [0,  0,  0,  0,  0,  0,  0,  0],
    ], 8, 8, [
        [0,  1, -1, 1,  1,  1,  1,  0],
        [0,  1,  1, 1,  1, -1,  2,  1],
        [0,  1,  1, 1,  1,  2, -1,  1],
        [1,  2, -1, 1,  1,  2,  2,  1],
        [-1, 3,  2,  2, 2, -1,  2,  1],
        [2, -1,  1, 1, -1,  3,  3, -1],
        [1,  1,  1, 1,  1,  2, -1,  2],
        [0,  0,  0, 0,  0,  1,  1,  1],
    ]),

    # Teste 6
    ([
        [-1,  0, 0,  0,  0,  0,  0,  0],
        [-1, 0,  0,  0,  0,  0,  0,  0],
        [0,  0, 0,  0,  0,  0,  0, - 1],
        [0,  0,  0,  0,  0,  0,  0,  0],
        [0,  0,  0,  0,  0,  0,  0,  0],
        [-1, 0, -1, -1,  0,  0,  0, -1],
        [0,  0,  0, -1,  0,  0,  0,  0],
        [-1,  0, 0, 0,  0, - 1,  0,  0],
    ], 8, 8, [
        [-1, 2,  0,  0,  0,  0,  0,  0],
        [-1, 2,  0,  0,  0,  0,  1,  1],
        [1,  1,  0,  0,  0,  0,  1, -1],
        [0,  0,  0,  0,  0,  0,  1,  1],
        [1,  2,  2,  2,  1,  0,  1,  1],
        [-1, 2, -1, -1,  2,  0,  1, -1],
        [2,  3,  3, -1,  3,  1,  2,  1],
        [-1, 1,  1,  1,  2, -1,  1,  0],
    ]),

    # Teste 7
    ([
        [0,  0,  0,  0,  0,  0,  0,  0],
        [0,  0,  0,  0,  0,  0,  0,  0],
        [0,  0,  0, -1, -1,  0,  0,  0],
        [0,  0,  0,  0,  0,  0, -1,  0],
        [0,  0,  0, -1,  0,  0,  0, - 1],
        [-1,  0,  0, -1,  0,  0,  0,  0],
        [0,  0,  0,  0,  0, -1, -1,  0],
        [0,  0,  0,  0,  0,  0, -1,  0],
    ], 8, 8, [
        [0,  0,  0,  0,  0,  0,  0,  0],
        [0,  0,  1,  2,  2,  1,  0,  0],
        [0,  0,  1, -1, -1,  2,  1,  1],
        [0,  0,  2,  3,  3,  2, -1,  2],
        [1,  1,  2, -1,  2,  1,  2, -1],
        [-1,  1,  2, -1,  3, 2,  3, 2],
        [1,  1,  1,  1,  2, -1, -1, 2],
        [0,  0,  0,  0,  1,  3, -1, 2]
    ]),

    # Teste 8
    ([
        [0,  0, - 1,  0,  0,  0,  0,  0,],
        [0, - 1,  0,  0,  0,  0,  0, - 1,],
        [0,  0,  0,  0,  0,  0, - 1, - 1,],
        [0,  0,  0,  0, - 1,  0,  0,  0,],
        [0,  0,  0,  0,  0,  0, - 1,  0,],
        [0,  0,  0,  0,  0,  0,  0,  0,],
        [0,  0,  0,  0, - 1,  0,  0,  0,],
        [-1,  0,  0,  0,  0, - 1,  0,  0,],
    ],  8, 8, [
        [1,  2, -1,  1,  0,  0,  1,  1],
        [1, -1,  2,  1,  0,  1,  3, -1],
        [1,  1,  1,  1,  1,  2, -1, -1],
        [0,  0,  0,  1, -1,  3,  3,  3],
        [0,  0,  0,  1,  1,  2, -1,  1],
        [0,  0,  0,  1,  1,  2,  1,  1],
        [1,  1,  0,  1, -1,  2,  1,  0],
        [-1, 1,  0,  1,  2, -1,  1,  0],
    ]),

    # Teste 9
    ([
        [-1,  0, 0,  0,  0,  0,  0,  0],
        [0,  0,  0,  0,  0,  0,  0,  0],
        [0,  0,  0,  0,  0,  0,  0, - 1],
        [0,  0,  0,  0,  0,  0,  0,  0],
        [0,  0,  0,  0,  0,  0,  0,  0],
        [-1, 0, -1, -1,  0,  0,  0, -1],
        [0,  0,  0, -1,  0,  0,  0,  0],
        [-1,  0, 0, 0,  0, - 1,  0,  0],
    ], 8, 8, [
        [-1, 1,  0,  0,  0,  0,  0,  0],
        [1,  1,  0,  0,  0,  0,  1,  1],
        [0,  0,  0,  0,  0,  0,  1, -1],
        [0,  0,  0,  0,  0,  0,  1,  1],
        [1,  2,  2,  2,  1,  0,  1,  1],
        [-1, 2, -1, -1,  2,  0,  1, -1],
        [2,  3,  3, -1,  3,  1,  2,  1],
        [-1, 1,  1,  1,  2, -1,  1,  0],
    ]),
    # Teste 10
    ([
        [0,  0,  0,  0,  0,  0,  0, -1,],
        [0, -1,  0,  0,  0,  0, -1,  0],
        [0,  0,  0, -1,  0,  0,  0,  0],
        [0,  0, -1,  0,  0, -1,  0,  0],
        [0,  0,  0, -1,  0,  0,  0,  0],
        [0,  0,  0,  0,  0,  0,  0,  0],
        [-1, 0,  0,  0,  0, -1,  0,  0],
        [0,  0,  0,  0,  0, -1,  0,  0],
    ], 8, 8, [
        [1,  1,  1,  0,  0,  1,  2, -1],
        [1, -1,  2,  1,  1,  1, -1,  2],
        [1,  2,  3, -1,  2,  2,  2,  1],
        [0,  1, -1,  3,  3, -1,  1,  0],
        [0,  1,  2, -1,  2,  1,  1,  0],
        [1,  1,  1,  1,  2,  1,  1,  0],
        [-1, 1,  0,  0,  2, -1,  2,  0],
        [1,  1,  0,  0,  2, -1,  2,  0],
    ]),

    # teste matriz 9x9

    ([
        [0, - 1, - 1,  0, - 1,  0, - 1,  0,  0,],
        [0,  0,  0,  0,  0,  0,  0, - 1,  0,],
        [0,  0,  0, - 1,  0,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0, - 1, - 1,  0,  0,],
        [0,  0,  0, - 1,  0,  0,  0,  0,  0,],
        [0,  0,  0, - 1,  0,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0,  0,  0,  0,  0,],
        [0,  0,  0, - 1,  0,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0,  0,  0,  0,  0,],
    ], 9, 9, [
        [1, -1, -1,  2, -1,  2, -1,  2,  1,],
        [1,  2,  3,  3,  2,  2,  2, -1,  1,],
        [0,  0,  1, -1,  2,  2,  3,  2,  1,],
        [0,  0,  2,  2,  3, -1, -1,  1,  0,],
        [0,  0,  2, -1,  3,  2,  2,  1,  0,],
        [0,  0,  2, -1,  2,  0,  0,  0,  0,],
        [0,  0,  2,  2,  2,  0,  0,  0,  0,],
        [0,  0,  1, -1,  1,  0,  0,  0,  0,],
        [0,  0,  1,  1,  1,  0,  0,  0,  0,],
    ]),
    # teste matriz 10x10

    ([
        [0, - 1,  0, - 1,  0,  0, - 1, - 1,  0,  0,],
        [0,  0, - 1,  0, - 1,  0,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0, - 1,  0,  0,  0,  0,],
        [-1,  0,  0,  0,  0,  0,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,],
        [-1,  0,  0, - 1,  0,  0,  0, - 1,  0,  0,],
        [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,],
        [-1,  0,  0,  0,  0,  0,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,],
    ], 10, 10, [
        [1, -1,  3, -1,  2,  2, -1, -1,  1,  0,],
        [1,  2, -1,  3, -1,  3,  3,  2,  1,  0,],
        [1,  2,  1,  2,  2, -1,  1,  0,  0,  0,],
        [-1, 1,  0,  0,  1,  1,  1,  0,  0,  0,],
        [2,  2,  1,  1,  1,  0,  1,  1,  1,  0,],
        [-1, 1,  1, -1,  1,  0,  1, -1,  1,  0,],
        [2,  2,  1,  1,  1,  0,  1,  1,  1,  0,],
        [-1, 1,  0,  0,  0,  0,  0,  0,  0,  0,],
        [1,  1,  0,  0,  0,  0,  0,  0,  0,  0,],
        [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,],
    ]),

    # teste matriz 17x17
    # teste matriz 18x18
    # teste matriz 22x22
    # teste matriz 23x23


    # para o tabuleiro de nível intermediário - 10 testes no total



    # teste matriz 25x25
    # teste matriz 26x26

])
def test_calculate_numbers(input_field, rows, cols, expected_field):
    calculate_numbers_function(input_field, rows, cols)
    assert input_field == expected_field
